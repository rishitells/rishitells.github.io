<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[rishitells]]></title><description><![CDATA[Personal blog]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io</link><generator>GatsbyJS</generator><lastBuildDate>Sun, 04 Jul 2021 10:33:22 GMT</lastBuildDate><item><title><![CDATA[Setting up Jest tests and coverage in GitLab CI]]></title><description><![CDATA[1. Add GitLab CI configuration file in the root In the root of your project, add  with the configuration below. Note that We have cached the…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/setting-up-gitlab-ci-with-jest/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/setting-up-gitlab-ci-with-jest/</guid><pubDate>Sun, 04 Jul 2021 22:12:03 GMT</pubDate><content:encoded>&lt;h3&gt;1. Add GitLab CI configuration file in the root&lt;/h3&gt;
&lt;p&gt;In the root of your project, add &lt;code class=&quot;language-text&quot;&gt;.gitlab-ci.yml&lt;/code&gt; with the configuration below.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yaml&quot;&gt;&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; node&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;latest

&lt;span class=&quot;token key atrule&quot;&gt;stages&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; build
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; test

&lt;span class=&quot;token key atrule&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; build
  &lt;span class=&quot;token key atrule&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; yarn
  &lt;span class=&quot;token key atrule&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; node_modules/
  &lt;span class=&quot;token key atrule&quot;&gt;artifacts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;expire_in&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1 days
    &lt;span class=&quot;token key atrule&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; on_success
    &lt;span class=&quot;token key atrule&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; node_modules/

&lt;span class=&quot;token key atrule&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; test
  &lt;span class=&quot;token key atrule&quot;&gt;coverage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; /All files&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;^&lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token important&quot;&gt;*\|&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;^&lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token important&quot;&gt;*\s+(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;\d\.&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;+)/
  &lt;span class=&quot;token key atrule&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; build
  &lt;span class=&quot;token key atrule&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; yarn test&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;ci
  &lt;span class=&quot;token key atrule&quot;&gt;artifacts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; always
    &lt;span class=&quot;token key atrule&quot;&gt;reports&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;junit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; junit.xml
      &lt;span class=&quot;token key atrule&quot;&gt;cobertura&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; coverage/cobertura&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;coverage.xml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that We have cached the &lt;code class=&quot;language-text&quot;&gt;node_modules/&lt;/code&gt; in build stage to make them available for subsequent jobs without having to download them again.&lt;/p&gt;
&lt;p&gt;Pushing this to GitLab will automatically trigger the CI build. But before that, we’ll add the required packages/configuration so that the build passes.&lt;/p&gt;
&lt;h3&gt;2. Install &lt;code class=&quot;language-text&quot;&gt;jest-junit&lt;/code&gt; package for reporting of tests&lt;/h3&gt;
&lt;p&gt;Next, we’ll configure jest-junit, which will generate JUnit report format XML file (&lt;code class=&quot;language-text&quot;&gt;junit.xml&lt;/code&gt;) in the project root. GitLab will parse this XML format and then these reports can be viewed inside the pipelines details page, and also in the reports panel in Merge Requests. See the &lt;a href=&quot;https://docs.gitlab.com/ee/ci/unit_test_reports.html#how-it-works&quot;&gt;GitLab Unit test reports&lt;/a&gt; docs for more details.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --save-dev jest-junit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;OR&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;yarn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; --dev jest-junit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;3. Add &lt;code class=&quot;language-text&quot;&gt;coverageReporters&lt;/code&gt; and other required config to &lt;code class=&quot;language-text&quot;&gt;jest.config.js&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;From the GitLab Docs -&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Collecting the coverage information is done via GitLab CI/CD’s artifacts reports feature. You can specify one or more coverage reports to collect, including wildcard paths. GitLab then takes the coverage information in all the files and combines it together.&lt;/p&gt;
&lt;p&gt;For the coverage analysis to work, you have to provide a properly formatted Cobertura XML report to artifacts:reports:cobertura.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So we need to add Cobertura coverage reporter in &lt;code class=&quot;language-text&quot;&gt;jest.config.js&lt;/code&gt; for test coverage in GitLab Merge Requests&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;collectCoverageFrom&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;src/**/*.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;!**/node_modules/**&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;coverageReporters&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;html&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;text-summary&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;cobertura&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;testMatch&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;**/*.test.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Adding &lt;code class=&quot;language-text&quot;&gt;cobertura&lt;/code&gt; to &lt;code class=&quot;language-text&quot;&gt;coverageReporters&lt;/code&gt; will generate &lt;code class=&quot;language-text&quot;&gt;cobertura-coverage.xml&lt;/code&gt; inside &lt;code class=&quot;language-text&quot;&gt;/coverage/&lt;/code&gt; folder created by Jest, and will be parsed by GitLab.&lt;/p&gt;
&lt;h3&gt;4. Add CI test run script to &lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt; with jest-junit reporter&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;test:ci&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;jest --config ./jest.config.js --collectCoverage --coverageDirectory=\&quot;./coverage\&quot; --ci --reporters=default --reporters=jest-junit --watchAll=false&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This script is used in the &lt;code class=&quot;language-text&quot;&gt;test&lt;/code&gt; stage in the &lt;code class=&quot;language-text&quot;&gt;.gitlab-ci.yaml&lt;/code&gt; file we created in step 1.&lt;/p&gt;
&lt;h3&gt;5. Modify GitLab Project CI/CD settings for test coverage parsing&lt;/h3&gt;
&lt;p&gt;Go to Project &gt; Settings &gt; CI/CD &gt; General pipelines &gt; Test coverage parsing
Add the following RegEx -&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Lines\s*:\s*(\d+.?\d*)%&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This regular expression is used to find test coverage output in the job log. This coverage % can be viewed on Project &gt; CI/CD &gt; Jobs. We can also configure Badges on Project Overview page to show coverage % (see next step).&lt;/p&gt;
&lt;p&gt;Finally, push all the changes to GitLab and you should see your pipeline up and running.
Also in the subsequent Merge Requests, you should see the number of tests, failing tests (if any) and failure reason, and test coverage information infiles.&lt;/p&gt;
&lt;h3&gt;6. Show Pipeline and Coverage Badge on the Project Overview page&lt;/h3&gt;
&lt;p&gt;We can add Badges to the overview page of GitLab projects to display useful information such as pipeline status, current release version, test coverage percentage etc. Below is how we can configure and add Badges -&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/user/project/badges.html#project-badges&quot;&gt;From GitLab Docs:&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To add a new badge to a project:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to your project’s Settings &gt; General &gt; Badges.&lt;/li&gt;
&lt;li&gt;Under “Link”, enter the URL that the badges should point to and under “Badge image URL” the URL of the image that should be displayed.&lt;/li&gt;
&lt;li&gt;Submit the badge by clicking the Add badge button.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Example project badge: Pipeline Status&lt;/h3&gt;
&lt;p&gt;A common project badge presents the GitLab CI pipeline status.&lt;/p&gt;
&lt;p&gt;To add this badge to a project:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to your project’s Settings &gt; General &gt; Badges.&lt;/li&gt;
&lt;li&gt;Under Name, enter Pipeline Status.&lt;/li&gt;
&lt;li&gt;Under Link, enter the following URL: &lt;a href=&quot;https://gitlab.com/%25%7Bproject_path%7D/-/commits/%25%7Bdefault_branch%7D&quot;&gt;https://gitlab.com/%{project_path}/-/commits/%{default_branch}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Under Badge image URL, enter the following URL: &lt;a href=&quot;https://gitlab.com/%25%7Bproject_path%7D/badges/%25%7Bdefault_branch%7D/pipeline.svg&quot;&gt;https://gitlab.com/%{project_path}/badges/%{default_branch}/pipeline.svg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Submit the badge by clicking the Add badge button.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the similar way, we can add a &lt;code class=&quot;language-text&quot;&gt;coverage&lt;/code&gt; badge to project. Just replace &lt;code class=&quot;language-text&quot;&gt;pipeline.svg&lt;/code&gt; with &lt;code class=&quot;language-text&quot;&gt;coverage.svg&lt;/code&gt; in step 4 above.&lt;/p&gt;
&lt;h3&gt;7. Publish Jest Coverage Report to GitLab pages&lt;/h3&gt;
&lt;p&gt;We can publish our Jest coverage report (&lt;code class=&quot;language-text&quot;&gt;.html&lt;/code&gt;) to GitLab pages to view detailed Jest coverage report on a GitLab Pages URL.&lt;/p&gt;
&lt;p&gt;To publish - modify &lt;code class=&quot;language-text&quot;&gt;.gitlab-ci.yml&lt;/code&gt; to add deploy stage for publishing the coverage report HTML to GitLab pages&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;diff&quot;&gt;&lt;pre class=&quot;language-diff&quot;&gt;&lt;code class=&quot;language-diff&quot;&gt;image: node:latest

stages:
&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt; - build
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt; - test
&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt; - deploy
&lt;/span&gt;
build:
&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt; stage: build
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt; script:
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;   - yarn
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt; cache:
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;   paths:
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;     - node_modules/
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt; artifacts:
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;   expire_in: 1 days
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;   when: on_success
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;   paths:
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;     - node_modules/
&lt;/span&gt;
test:
&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt; stage: test
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt; coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt; dependencies:
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;   - build
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt; script:
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;   - yarn test:ci
&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt; cache:
&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;   paths:
&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;     - coverage/
&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt; artifacts:
&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;   paths:
&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;     - coverage/
&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;   when: always
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;   reports:
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;     junit:
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;       - junit.xml
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;     cobertura: coverage/cobertura-coverage.xml
&lt;/span&gt;
&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt; pages:
&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;  stage: deploy
&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;  dependencies:
&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;    - test
&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;  script:
&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;    - mkdir .public
&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;    - cp -r coverage/* .public
&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;    - mv .public public
&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;  artifacts:
&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;    paths:
&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;      - public
&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;  only:
&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;    - master&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After pushing the changes, when the deploy step is successful in pipeline, We can access the Jest coverage report page using the URL mentioned in &lt;code class=&quot;language-text&quot;&gt;Project &amp;gt; Settings &amp;gt; Pages&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Each time the deploy job runs, a new coverage report will be published to the GitLab pages URL. Note that we have published coverage report to Pages only for &lt;code class=&quot;language-text&quot;&gt;master&lt;/code&gt; branch, because we don’t want all branch commits to publish coverage report.&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/ci/quick_start/#cicd-process-overview&quot;&gt;GitLab CI/CD process overview - GitLab Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/ci/unit_test_reports.html&quot;&gt;Unit test reports - GitLab Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/user/project/merge_requests/test_coverage_visualization.html&quot;&gt;Test Coverage Visualization - GitLab Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://javascript.plainenglish.io/how-to-display-code-coverage-of-a-vue-project-in-gitlab-9d1510a3e794&quot;&gt;How to display code coverage of a Vue project in Gitlab&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item></channel></rss>